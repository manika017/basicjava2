Syntax is very important when you learning programming. If you are comfortable with syntax, it makes easy to correct compilation errors and concentrate on logical programming. There is not much syntax to learn in basic Java. Lets recap some of the syntax we have learned.
Tip: Don't remember it blindly. Remember logically ( and also try to think as natural english sentences) and it will be easy

if
    if(...){

    }
    
if followed by opening and closing parenthesis () and then code block {}
    if( condition which can say true/false (yes or no)){
    
    // programming statements
        // like System.out.println
        // some statements like x = x+2
    }
    
condition returns true/false (says yes/no)
x>0 ( true if the variable x is greater than 0. ex: x 10 then true , x -2 then false)
x>0 && y<10 ( x should be greater than zero and y should be less than 10 then only it is true)
x
y

condition
5
4

true
5
15

false
x>0 || y<10 ( x should be greater than zero or y should be less than 10 then only it is true)
x
y

condition
5
4

true
5
14

true
0
5

true
0
15

false
Tip: Read if ( as is)
if, else if, else
Follows the same principle as if
 
 if( ... ){

    }else if(...){

    }else if(...){

    }else if(...){

    }else{
        // If none of the above matches things will be executed here.
    }
    
for
Used for repetition
    for( ;  ; ){

    }
    
for followed by () , followed by code block {} . () contains 3 logical blocks separated by ;.
Entire for syntax was explained step by step here
Custom data type ( class)
Defining your data type.
    class YourDataTypeNameHere{

    }
    
Very simple here. class followed by yourdatatypename and then code block
    class Person{

    }
Custom data type ( class)
You can fill properties in the class just like any other variables you define.
    class Person{
        String name;
        int age;
        int grade;
    }
    
Using custom data type
In order to use the above data type and create a variable
    // datatype   variableName = new  datatype();
    Person p1 = new Person();
syntax is datatype ( in this case it is Person) followed by variableName = new keyword and then datatype and followed by ()
Class, Object, Instance
Last week we have learned creating our data types with keyword as class and creating variable.
    class Person{
        String name;
        int age;
        int grade;
    }
    
We have discussed this is creating our data type and then creating variables for it.
The technical term for creating our data type in Java is class and creating variable for this data type is called object or instance ( object is more used.)
Class

If you observe above, when we define the class we are describing that data type. For example in above Person class, we are not specifying a particular person ,but we are specifying what a person in common will have it. We can think of creating a class as template or cookie cutter or recipe or blueprint. Just like you create cookies with a cookie cutter , we create objects with class
class  is template/cookie cutter/recipe/blueprint
for example;

    When class is cookie cutter, then object is cookie
Now-on-wards call class ( you can still think as custom data type for your reference, but start using word class). Similarly use word object for creating a variable of that class.
Note: class is Singular Noun ( ex: Person but not Persons.)
How many objects you can create for given class?. Answer: as many as you can.
Actions/Methods/Functions/Behavior

When we have described a person like below
    class Person{
        String name;
        int age;
        int grade;
    }
    
We have mentioned about a person will have name,age and grade. But what we are missing is some behavior associated with person. When we say a Person, we also say what he/she can do also. For example a person can Play, Read Books, Jog for every day , does some programming etc., If you observe these they are all actions a person can do.
action

In general (not related to programming) we have actions happen all the time in our real life. some of them are
run

run for 10 miles
get coffee
take money and get coffee

If you observe these actions can be grouped in to following categories
Actions wont' take anything and does not give back anything 
run, read, jog, play ( action: run, read, jog, play)
Actions take some inputs but does not give anything back 
run 10 miles ( action is run and input is 10 miles)
Action does not take anything but give back 
Tell me how many miles you have run today ( action is: tell miles you have run and output : miles ran)
Action take some input and also give back some output 
If you go to Starbucks they take money and give coffee ( action is: get coffee, input: money , output: coffee)

example:

action
input
output
run
run
none
none
read "Harry Potter" book
read
"Harry Potter" book
none
tell me miles you ran
tell miles you ran
none
number of miles ran
take money get coffee
get coffee
money
coffee

Actions in programming
Lets define these actions in Java programming.
    class Person{
        // no input
        // no output
        void run(){

        }

        // input : bookName
        // output: none
        void readBook(String bookName){

        }

        // input: none
        // output: miles ran
        int tellMeMilesRanToday(){
            return 10;
        }

        // input: money
        // output: coffee
        String getCoffee(int money){
            return "latte";
        }
    }
    
Note: actions are verbs (class are Noun). Also actions start with lowercase (read) and class name start with Uppercase (Person)
Syntax
If you observe we have the syntax as
void actionName(){

}

void actionName(inputVariables){

}

Datatype actionName(){
    return variableOfReturnDataType;
}

Datatype actionName(inputVariables){
    return variableOfReturnDataType;
}

inputVariables: comma separated variables. You know variables declaration by this time as every variable will be preceded by its daa type
    (int x,int y)
Datatype : When you are returning (output) from a action you specify the just data type ( not variable)

variableOfReturnDataType: when there is a output from action you should have return with actual value.
Calculator sample
Lets define some examples. Lets build calculator class
Create Java project with name as CalculatorSample
Add class Application (check public static void main check mark as this is the class will have main method)
Add class Calculator ( uncheck public stati void main check box as this class will not have main). (Only one class should have main and you know why. When you run a program java starts from main function )
Fill the class like below
    class Calculator{
    
    int add(int x, int y){
            int z;
            z = x+y;
            return z;
        }

        int sub(int x, int y){
            int z;
            z = x-y;
            return z;
        }
    }
    
add
add method takes two inputs x and y and outputs (returns) of data type int
How to use this action
In order to use this method we have to create object ( remember nothing but creating variable but now on wards you will be talking as object)
In Application class and in main method
    
    Calculator c = new Calculator(); 
    int sum; 
    sum = c.add(2,3);
    System.out.println(sum);
    
If you observe above after creating object we call method with dot(.) operator
c.add(2,3)
When a action returns (outputs) something, then you can take this output with a variable like below
sum = c.add(2,3);
You need to declare sum variable before this (the data type of this variable is nothing but what action is returning. In above case add is returning of type int and hence the sum has to be int )
Note: we have been calling this as action but technical term is method ( also called function)

Scope
The variables declared in code block (remember code block starts with { and ends with } )
In methods

class Calculator{
        int add(int x, int y){
            int z;
            z = x+y;
            return z;
        }

        int sub(int x, int y){
            int z;
            z = x-y;
            return z;
        }
    }
    
add declares variable z and this variable is alive when it was declared and dead after the end of }. The variable z declared in sub is totally different and hence we had declared again. The z variable is no longer available after the return statement. This is called variable scoping ( again remember for now the scope exists between code block { variable live and dead within this.})

Summary
Remember Syntax is important ( try understanding it and practice it.)
Custom data type technical term is class
variable for custom data type is nothing but object ( also instance)
class is Singular Noun ( ex: Person) 
class in Java starts with Uppercase
action in class describe the behavior 
They are called method ( also function)
They start with lower case ( run, readBook)
scoping meaning the variable declared in a code block is alive and dead between { and }

Homework
Create session7 notes in notes/session7.txt in git repository
Project with creating methods. 
Project name CarSample
Class Application.java with main
New class and name as Car
Add methods start ( does not take anything and does not return anything)
In start method add a print statement like below 
System.out.println("starting the car")
Add methods stop ( does not take anything and does not return anything) 
System.out.println("stopping the car")
In Application class create Car object and call methods start and stop
Check-in homework folder in git repository
